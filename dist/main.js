(()=>{var t={877:(t,e,s)=>{var r=s(570),n=s(171),a=n;a.v1=r,a.v4=n,t.exports=a},327:t=>{for(var e=[],s=0;s<256;++s)e[s]=(s+256).toString(16).substr(1);t.exports=function(t,s){var r=s||0,n=e;return[n[t[r++]],n[t[r++]],n[t[r++]],n[t[r++]],"-",n[t[r++]],n[t[r++]],"-",n[t[r++]],n[t[r++]],"-",n[t[r++]],n[t[r++]],"-",n[t[r++]],n[t[r++]],n[t[r++]],n[t[r++]],n[t[r++]],n[t[r++]]].join("")}},217:t=>{var e="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(e){var s=new Uint8Array(16);t.exports=function(){return e(s),s}}else{var r=new Array(16);t.exports=function(){for(var t,e=0;e<16;e++)0==(3&e)&&(t=4294967296*Math.random()),r[e]=t>>>((3&e)<<3)&255;return r}}},570:(t,e,s)=>{var r,n,a=s(217),i=s(327),o=0,c=0;t.exports=function(t,e,s){var l=e&&s||0,d=e||[],u=(t=t||{}).node||r,m=void 0!==t.clockseq?t.clockseq:n;if(null==u||null==m){var p=a();null==u&&(u=r=[1|p[0],p[1],p[2],p[3],p[4],p[5]]),null==m&&(m=n=16383&(p[6]<<8|p[7]))}var f=void 0!==t.msecs?t.msecs:(new Date).getTime(),h=void 0!==t.nsecs?t.nsecs:c+1,g=f-o+(h-c)/1e4;if(g<0&&void 0===t.clockseq&&(m=m+1&16383),(g<0||f>o)&&void 0===t.nsecs&&(h=0),h>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");o=f,c=h,n=m;var v=(1e4*(268435455&(f+=122192928e5))+h)%4294967296;d[l++]=v>>>24&255,d[l++]=v>>>16&255,d[l++]=v>>>8&255,d[l++]=255&v;var k=f/4294967296*1e4&268435455;d[l++]=k>>>8&255,d[l++]=255&k,d[l++]=k>>>24&15|16,d[l++]=k>>>16&255,d[l++]=m>>>8|128,d[l++]=255&m;for(var y=0;y<6;++y)d[l+y]=u[y];return e||i(d)}},171:(t,e,s)=>{var r=s(217),n=s(327);t.exports=function(t,e,s){var a=e&&s||0;"string"==typeof t&&(e="binary"===t?new Array(16):null,t=null);var i=(t=t||{}).random||(t.rng||r)();if(i[6]=15&i[6]|64,i[8]=63&i[8]|128,e)for(var o=0;o<16;++o)e[a+o]=i[o];return e||n(i)}}},e={};function s(r){var n=e[r];if(void 0!==n)return n.exports;var a=e[r]={exports:{}};return t[r](a,a.exports,s),a.exports}(()=>{"use strict";var t=s(877);class e{constructor(e){this.details=e,this.id=(0,t.v4)(),this.isDone=!1}toogleStatus(){this.isDone=!this.isDone}getDetails(){return this.details}editTask(t){for(let e in t)for(let s in this.details)s===e&&(this.details[e]=t[e])}}class r{constructor(e){this.name=e,this.tasks=[],this.id=(0,t.v4)()}setName(t){this.name=t}getName(){return this.name}findTask(t){return this.tasks.find((({id:e},s)=>{if(t===e)return this.tasks[s]}))}getTasks(){return this.tasks}addTask(t){this.tasks.push(t)}removeTask(t){const e=this.tasks.map((t=>t.id)).indexOf(t);this.tasks.splice(e,1)}}function n(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function a(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}var i=36e5,o={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},c=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,l=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,d=/^([+-])(\d{2})(?::?(\d{2}))?$/;function u(t){var e,s={},r=t.split(o.dateTimeDelimiter);if(r.length>2)return s;if(/:/.test(r[0])?(s.date=null,e=r[0]):(s.date=r[0],e=r[1],o.timeZoneDelimiter.test(s.date)&&(s.date=t.split(o.timeZoneDelimiter)[0],e=t.substr(s.date.length,t.length))),e){var n=o.timezone.exec(e);n?(s.time=e.replace(n[1],""),s.timezone=n[1]):s.time=e}return s}function m(t,e){var s=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+e)+"})|(\\d{2}|[+-]\\d{"+(2+e)+"})$)"),r=t.match(s);if(!r)return{year:null};var n=r[1]&&parseInt(r[1]),a=r[2]&&parseInt(r[2]);return{year:null==a?n:100*a,restDateString:t.slice((r[1]||r[2]).length)}}function p(t,e){if(null===e)return null;var s=t.match(c);if(!s)return null;var r=!!s[4],n=f(s[1]),a=f(s[2])-1,i=f(s[3]),o=f(s[4]),l=f(s[5])-1;if(r)return function(t,e,s){return e>=1&&e<=53&&s>=0&&s<=6}(0,o,l)?function(t,e,s){var r=new Date(0);r.setUTCFullYear(t,0,4);var n=7*(e-1)+s+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+n),r}(e,o,l):new Date(NaN);var d=new Date(0);return function(t,e,s){return e>=0&&e<=11&&s>=1&&s<=(k[e]||(y(t)?29:28))}(e,a,i)&&function(t,e){return e>=1&&e<=(y(t)?366:365)}(e,n)?(d.setUTCFullYear(e,a,Math.max(n,i)),d):new Date(NaN)}function f(t){return t?parseInt(t):1}function h(t){var e=t.match(l);if(!e)return null;var s=g(e[1]),r=g(e[2]),n=g(e[3]);return function(t,e,s){return 24===t?0===e&&0===s:s>=0&&s<60&&e>=0&&e<60&&t>=0&&t<25}(s,r,n)?s*i+6e4*r+1e3*n:NaN}function g(t){return t&&parseFloat(t.replace(",","."))||0}function v(t){if("Z"===t)return 0;var e=t.match(d);if(!e)return 0;var s="+"===e[1]?-1:1,r=parseInt(e[2]),n=e[3]&&parseInt(e[3])||0;return function(t,e){return e>=0&&e<=59}(0,n)?s*(r*i+6e4*n):NaN}var k=[31,null,31,30,31,30,31,31,30,31,30,31];function y(t){return t%400==0||t%4==0&&t%100}function b(t,e,s){return(s=s||[]).length>=e?t.apply(null,s.slice(0,e).reverse()):function(){var r=Array.prototype.slice.call(arguments);return b(t,e,s.concat(r))}}const j=b((function(t,e){a(1,arguments);var s=e||{},r=null==s.additionalDigits?2:n(s.additionalDigits);if(2!==r&&1!==r&&0!==r)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof t&&"[object String]"!==Object.prototype.toString.call(t))return new Date(NaN);var i,o=u(t);if(o.date){var c=m(o.date,r);i=p(c.restDateString,c.year)}if(isNaN(i)||!i)return new Date(NaN);var l,d=i.getTime(),f=0;if(o.time&&(f=h(o.time),isNaN(f)||null===f))return new Date(NaN);if(!o.timezone){var g=new Date(d+f),k=new Date(0);return k.setFullYear(g.getUTCFullYear(),g.getUTCMonth(),g.getUTCDate()),k.setHours(g.getUTCHours(),g.getUTCMinutes(),g.getUTCSeconds(),g.getUTCMilliseconds()),k}return l=v(o.timezone),isNaN(l)?new Date(NaN):new Date(d+f+l)}),1);function w(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}function T(t){a(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function D(t){a(1,arguments);var e=T(t);return e.setHours(0,0,0,0),e}var N=864e5;const S=b((function(t,e){a(2,arguments);var s=D(t),r=D(e),n=s.getTime()-w(s),i=r.getTime()-w(r);return Math.round((n-i)/N)}),2);class E{constructor(){this.projects=[]}getAllTasks(){return this.projects.map((t=>t.tasks)).flat()}todayTasks(){return this.getAllTasks().filter((t=>{const e=new Date,s=j(t.details.date);if(0===S(e)(s))return t}))}nextWeekTasks(){return this.getAllTasks().filter((t=>{const e=new Date,s=j(t.details.date),r=S(e)(s);if(r<=7&&r>=1)return t}))}getProjects(){return this.projects}getSpecifiedProject(t){return this.getProjects().find((({id:e})=>{if(e===t)return t}))}addProject(...t){for(let e of t)this.projects.push(e)}removeProject(t){const e=this.projects.map((t=>t.id)).indexOf(t);this.projects.splice(e,1)}renameProject(t,e){this.projects.find((({id:s},r)=>{t===s&&(this.projects[r].name=e)}))}getProjectNames(){return this.projects.map((t=>t.name))}}class C{constructor(t){this.element=t,this.tagList=[],this.form=document.createElement("form"),this.button=document.createElement("button"),this.blocks}static createTagObjects(t,e,s,r){let n={},a=t;s.forEach((t=>{for(let e=0;e<a.length;e++)t===a[e]&&(Object.assign(n,{tag:a[e]}),a.splice(e,1))})),r.forEach((t=>{for(let e=0;e<a.length;e++)t===a[e]&&(Object.assign(n,{type:a[e]}),a.splice(e,1))}));for(let t=0;t<a.length;t++)Array.isArray(a[t])?Object.assign(n,{subtags:[a[t]]}):Object.assign(n,{name:a[t]});e.push(n)}static createBlock(t){const e=document.createElement("div"),s=document.createElement("label"),r=document.createElement(t.tag),n=document.createElement("br");if("SELECT"===r.tagName)for(let e of t.subtags)for(let t=0;t<e.length;t++){const s=document.createElement("option");s.textContent=e[t],s.value=e[t],r.appendChild(s)}return e.className=t.name.replace(/\s+/g,"-").toLowerCase(),e.append(s,n,r),e}static addButton(t){return t.textContent="Submit",t.className="submit",t.setAttribute("type","button"),t}getSubmitButton(){return this.button}addCloseButton(){const t=document.createElement("button"),e=document.querySelector(".form-container");t.innerHTML="&times;",t.setAttribute("type","button"),t.className="close",t.addEventListener("click",(()=>{this.remove(),e.classList.remove("show")})),this.form.appendChild(t)}setLabels(){const t=this.form.querySelectorAll("label");for(let e=0;e<t.length;e++)t[e].setAttribute("for",this.tagList[e].name.replace(/\s+/g,"-").toLowerCase()),t[e].textContent=this.tagList[e].name}setInputAttributes(){this.blocks=this.form.querySelectorAll("div");for(let t=0;t<this.blocks.length;t++){let e=this.blocks[t].lastChild;"INPUT"===e.tagName&&e.setAttribute("type",this.tagList[t].type),e.setAttribute("id",this.tagList[t].name.replace(/\s+/g,"-").toLowerCase()),e.setAttribute("name",this.tagList[t].name.replace(/\s+/g,"-").toLowerCase())}}addInput(...t){const e=["button","checkbox","color","date","datetime-local","email","file","hidden","image","month","number","password","radio","range","reset","search","submit","tel","text","time","url","week"],s=["input","textarea","button","select","option","optgroup","fieldset","output"];for(let r of t)Array.isArray(r)?C.createTagObjects(r,this.tagList,s,e):console.error(`${r} is not an array.`)}reneder(){for(let t of this.tagList)this.form.appendChild(C.createBlock(t));this.setLabels(),this.setInputAttributes(),this.form.appendChild(C.addButton(this.button)),this.element.appendChild(this.form)}remove(){this.form.remove(),this.tagList=[]}validation(){for(let t of this.blocks)if(""===t.lastChild.value)return alert("Please fill out empty fields"),!1}getValues(){const t={};for(let e=0;e<this.blocks.length;e++){let s=this.blocks[e].lastChild,r=s.getAttribute("name"),n=s.value;Object.assign(t,{[r]:n})}return t}getForm(){return this.form}setValues(t){this.blocks.forEach((e=>{for(let s in t)e.className===s&&(e.lastChild.value=t[s])}))}}class x{constructor(){this.menu=document.querySelector(".menu"),this.activeElement}static clearMenu(t){const e=t.querySelectorAll("ul");for(let t=0;t<e.length;t++)e[t].textContent=""}setActiveElement(t){const e=document.querySelectorAll("ul");if("projects"!==t.id&&"UL"===t.tagName){for(let t=0;t<e.length;t++)e[t].classList.remove("active");t.classList.add("active"),this.activeElement=t}}renederProjectList(t){const e=this.menu.querySelector(".new-projects");x.clearMenu(e);for(let s of t)if("Inbox"!==s.name){const t=document.createElement("i");t.className="fas fa-circle";const r=document.createElement("ul");r.textContent=s.name,r.setAttribute("data-project-id",s.id);const n=document.createElement("i");n.className="far fa-trash-alt",n.setAttribute("data-project-id",s.id),r.prepend(t),r.appendChild(n),e.appendChild(r)}}addProject(t){const e=this.menu.querySelector(".new-projects"),s=document.createElement("ul"),r=document.createElement("i"),n=document.createElement("i");n.className="fas fa-circle",s.textContent=t.name,s.setAttribute("data-project-id",t.id),r.className="far fa-trash-alt",r.setAttribute("data-project-id",t.id),s.append(n,r),e.appendChild(s)}getActiveElement(){return null===this.activeElement.getAttribute("data-project-id")?this.activeElement.id:this.activeElement.getAttribute("data-project-id")}getMenu(){return this.menu}}class L{constructor(t){this.taskList=t,this.content=document.createElement("div"),this.section=document.querySelector("#content")}static createContainer(){const t=document.createElement("div");return t.className="task-container",t}static createHeader(t){const e=document.createElement("div"),s=document.createElement("h3"),r=document.createElement("i"),n=document.createElement("i"),a=document.createElement("input");return e.className="tasks",s.textContent=t.details.title,r.className="far fa-edit edit",r.dataset.taskId=t.id,n.className="far fa-trash-alt remove",n.setAttribute("data-task-id",t.id),a.setAttribute("type","checkbox"),a.setAttribute("data-task-id",t.id),"High"===t.details.priority?a.classList.add("priority-high"):"Normal"===t.details.priority?a.classList.add("priority-normal"):a.classList.add("priority-low"),e.append(a,s,r,n),L.checkIfDone(t,a),e}static createDetails(t){const e=["Date","Priority","Description"],s=[t.details.date,t.details.priority,t.details.description],r=document.createElement("div");for(let t=0;t<e.length;t++){const n=document.createElement("div"),a=document.createElement("h4"),i=document.createElement("p");n.className="task-"+e[t].toLowerCase(),a.textContent=e[t],i.textContent=s[t],n.append(a,i),r.append(n)}return r.classList.add("details"),r}static checkIfDone(t,e){!0===t.isDone&&(e.checked=!0)}showDetails(t){t.nextElementSibling.classList.toggle("show")}changeStatus(t){t.classList.toggle("finished")}displayTasks(t){const e=document.createElement("h2");if(e.textContent=t,this.content.className="project-tasks",this.section.textContent="",this.section.appendChild(e),0===this.taskList.length)this.content.textContent="NO TASKS IN THIS PROJECT";else for(let t of this.taskList){const e=L.createContainer();e.append(L.createHeader(t),L.createDetails(t)),this.content.appendChild(e),!0===t.isDone&&e.classList.add("finished")}this.section.appendChild(this.content)}getContent(){return this.content}}class A{static changeValuesForOptionsInput(t){const e=document.querySelector("#project").querySelectorAll("option"),s=t.getProjects();for(let t=0;t<e.length;t++){const r=s[t].id;e[t].setAttribute("value",r)}}static setupTaskForm(t){const e=document.querySelector(".form-container"),s=new C(e);return void 0===t?(s.addInput(["input","text","Title"],["input","date","Date"],["select","Priority",["High","Normal","Low"]],["textarea","Description"]),s.addCloseButton(),s.reneder()):(s.addInput(["input","text","Title"],["input","date","Date"],["select","Priority",["High","Normal","Low"]],["select","Project",t.getProjectNames()],["textarea","Description"]),s.addCloseButton(),s.reneder(),A.changeValuesForOptionsInput(t)),e.classList.add("show"),s}static formSubmitNewTask(t,s,r){t.getSubmitButton().addEventListener("click",(()=>{const n=document.querySelector(".form-container");if(!1!==t.validation()){const a=new e(t.getValues()),i=s.getSpecifiedProject(a.getDetails().project);if(i.addTask(a),localStorage.setItem("list",JSON.stringify(s)),t.remove(),n.classList.remove("show"),a.getDetails().project!=r.getActiveElement())return;{const t=new L(i.getTasks());t.displayTasks(i.name),A.contentEventHandlers(t,i.id,s)}}}))}static setupProjectForm(t,e){const s=document.querySelector(".form-container"),r=new C(s);r.getForm().className="form-project",r.addInput(["Project Name","input","text"]),r.addCloseButton(),r.reneder(),s.classList.add("show"),A.formSubmitNewProject(r,t,e)}static formSubmitNewProject(t,e,s){t.getSubmitButton().addEventListener("click",(()=>{const n=document.querySelector(".form-container");if(!1!==t.validation()){const a=new r(t.getValues()["project-name"]);e.addProject(a),s.addProject(a),t.remove(),n.classList.remove("show"),localStorage.setItem("list",JSON.stringify(e))}}))}static formSetupEditTask(t,e,s,r){t.getSubmitButton().addEventListener("click",(()=>{e.editTask(t.getValues()),s.getContent().textContent="",s.displayTasks(document.querySelector("h2").textContent),t.remove(),document.querySelector(".form-container").classList.remove("show"),localStorage.setItem("list",JSON.stringify(r))}))}static menuEventHandlers(t,e){t.getMenu().addEventListener("click",(s=>{const r=s.target;if(!r.matches("section")&&!r.matches("#projects"))if(r.matches("#add-project"))A.setupProjectForm(e,t);else if(r.matches(".fa-trash-alt"))e.removeProject(s.target.dataset.projectId),s.target.closest("ul").remove(),localStorage.setItem("list",JSON.stringify(e));else{t.setActiveElement(r);let s,n,a=t.getActiveElement();if("today"===a)n=e.todayTasks(),s="Today";else if("next-week"===a)n=e.nextWeekTasks(),s="Next 7 days";else{const t=e.getSpecifiedProject(a);n=t.getTasks(),s=t.getName()}const i=new L(n);i.displayTasks(s),A.contentEventHandlers(i,a,e)}}))}static setTodayOrWeekProject(t,e){let s;if(void 0!==e){{const r=t.getAllTasks().find((({id:t})=>t===e));s=t.getSpecifiedProject(r.getDetails().project)}return s}}static contentEventHandlers(t,e,s){t.getContent().addEventListener("click",(r=>{const n=r.target.closest(".tasks"),a=r.target.dataset.taskId;let i=s.getSpecifiedProject(e);if("today"!==e&&"next-week"!==e||(i=A.setTodayOrWeekProject(s,a)),n){if(r.target.matches("input"))t.changeStatus(r.target.closest(".task-container")),i.findTask(a).toogleStatus();else if(r.target.matches(".remove"))i.removeTask(a),r.target.closest(".task-container").remove();else if(r.target.matches(".edit")){const e=i.findTask(a),r=e.getDetails(),n=A.setupTaskForm();n.setValues(r),A.formSetupEditTask(n,e,t,s)}else t.showDetails(n);localStorage.setItem("list",JSON.stringify(s))}}))}setToDo(t){const e=new x,s=document.querySelector("#inbox");let n=t.getProjects().find((({name:t})=>"Inbox"===t));if(void 0===n){const e=new r("Inbox");n=e,s.setAttribute("data-project-id",e.id),t.addProject(e)}else s.setAttribute("data-project-id",n.id);const a=new L(n.getTasks());a.displayTasks(n.getName()),e.setActiveElement(s),e.renederProjectList(t.getProjects()),A.contentEventHandlers(a,n.id,t),A.menuEventHandlers(e,t),document.querySelector("#add-task").addEventListener("click",(()=>{const s=A.setupTaskForm(t);A.formSubmitNewTask(s,t,e)}))}}class P{static convertToDo(t){const e=new E,s=P.convertTasks(t);return P.convertProjects(t).forEach((t=>{for(let e=0;e<s.length;e++)s[e].details.project===t.id&&t.addTask(s[e]);e.addProject(t)})),e}static convertProjects(t){let e=[];return t.projects.forEach((t=>{let s=new r(t.name);s.id=t.id,e.push(s)})),e}static convertTasks(t){let s=[];return t.projects.forEach((t=>{for(let r of t.tasks){let t=new e(r.details);t.isDone=r.isDone,s.push(t)}})),s}}const I=new A;if(null==localStorage.getItem("list")){const t=new E,s=new r("Default Project"),n=new e({title:"Default task one",date:"2021-05-12",priority:"High",project:s.id,description:"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur."}),a=new e({title:"Default task two",date:"2021-05-27",priority:"Normal",project:s.id,description:"Default task two"});a.isDone=!0;const i=new e({title:"Default task three",date:"2021-05-16",priority:"Low",project:s.id,description:"Default task three"});s.addTask(n),s.addTask(a),s.addTask(i),t.addProject(s),I.setToDo(t)}else{const t=JSON.parse(localStorage.getItem("list")),e=P.convertToDo(t);I.setToDo(e)}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,